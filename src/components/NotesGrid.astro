---
import { getCollection } from "astro:content";
import { orderNotesByYear } from "../utils/orderNotesByYear.astro";

import "../styles/notes.css";

interface Note {
  title: string;
  date: string;
  slug: string;
  summary?: string;
  image?: string;
  isPublished: boolean;
}

interface OrderedNotes {
  [year: string]: Note[];
}

const { inPage } = Astro.props;

const allNotes = await getCollection("notes", ({ data }: { data: Note }) => {
  return data.isPublished === true;
});
const orderedNotes: OrderedNotes = orderNotesByYear(
  allNotes,
  inPage ? false : true
);
---

{
  // Page grid
  inPage ? (
    <div class="notes-grid">
      <h1 class="inPage regular">
        Todas las <span class="bold">notas</span>
      </h1>

      {Object.entries(orderedNotes)
        .sort((yearA, yearB) => (yearA < yearB ? 1 : -1))
        .map(([year, notes]) => {
          const month_and_year = `${year.substring(7)} ${year.substring(0, 4)}`;
          return (
            <>
              <p class="title">{month_and_year}</p>
              <div class="grid">
                {notes
                  .sort((noteA: Note, noteB: Note) => (noteA < noteB ? 1 : -1))
                  .map((note: Note) => {
                    const weekday = new Date(note.date).toLocaleDateString(
                      "es-ES",
                      {
                        weekday: "long",
                      }
                    );
                    const day = `${note.date.substring(8, 10)}`;
                    return (
                      <a class="item" href={`/notes/${note.slug}`}>
                        <p>{note.title}</p>
                        <hr />
                        <span>{`${weekday} ${day}`}</span>
                      </a>
                    );
                  })}
              </div>
            </>
          );
        })}
    </div>
  ) : (
    // Index grid
    <div class="notes-grid">
      <h2 style="margin-bottom: var(--space-s)">Ãšltimas notas</h2>
      {Object.entries(orderedNotes)
        .sort((yearA, yearB) => (yearA < yearB ? 1 : -1))
        .map(([, notes]) => {
          return (
            <>
              <div class="grid">
                {notes
                  .sort((noteA: Note, noteB: Note) => (noteA < noteB ? 1 : -1))
                  .map((note: Note) => {
                    const date = `${note.date.substring(5, 7)}/${note.date.substring(2, 4)}`;
                    return (
                      <a class="item" href={`/notes/${note.slug}`}>
                        <p>{note.title}</p>
                        <hr />
                        <span>{date}</span>
                      </a>
                    );
                  })}
              </div>
            </>
          );
        })}
      <a href="/notes" class="more">
        Ver todas las notas
      </a>
    </div>
  )
}
